name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
      shell: bash

    - name: Add uv to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install dependencies
      run: |
        uv venv .venv # Create venv
        source .venv/bin/activate # Activate venv (use source for bash)
        uv pip install black isort flake8 mypy
        uv pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: |
        source .venv/bin/activate # Activate venv first
        black --check --line-length 100 src tests api dashboard
    
    - name: Check imports with isort
      run: |
        source .venv/bin/activate # Activate venv first
        isort --check-only --profile black src tests api dashboard
    
    - name: Lint with flake8
      run: |
        source .venv/bin/activate # Activate venv first
        flake8 src tests api dashboard --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests api dashboard --count --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Type check with mypy
      run: |
        source .venv/bin/activate # Activate venv first
        mypy --ignore-missing-imports src api dashboard

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
      shell: bash

    - name: Add uv to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install dependencies
      run: |
        uv venv .venv # Create venv
        source .venv/bin/activate # Activate venv
        uv pip install pytest pytest-cov
        uv pip install -r requirements.txt
    
    - name: Run unit tests
      run: |
        source .venv/bin/activate # Activate venv first
        pytest tests/unit/ --cov=src --cov=api --cov=dashboard --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
      shell: bash

    - name: Add uv to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install dependencies
      run: |
        uv venv .venv # Create venv
        source .venv/bin/activate # Activate venv
        uv pip install pytest pytest-cov
        uv pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        source .venv/bin/activate # Activate venv first
        pytest tests/integration/ --cov=src --cov=api --cov=dashboard --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: retail-analytics-ai:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
